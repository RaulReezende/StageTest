// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StageTest.Infrastructure;

#nullable disable

namespace StageTest.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250321143514_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StageTest.Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Documentacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Documentacoes");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Equipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equipe");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Ferramenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ferramentas");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Processo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponsaveisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("ResponsaveisId");

                    b.ToTable("Processos");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.ProcessoDocumentacao", b =>
                {
                    b.Property<int>("ProcessoDocumentacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessoDocumentacaoId"));

                    b.Property<int>("DocumentacaoId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessoId")
                        .HasColumnType("int");

                    b.Property<int?>("SubprocessoId")
                        .HasColumnType("int");

                    b.HasKey("ProcessoDocumentacaoId");

                    b.HasIndex("DocumentacaoId");

                    b.HasIndex("ProcessoId");

                    b.HasIndex("SubprocessoId");

                    b.ToTable("ProcessoDocumentacoes");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.ProcessoFerramenta", b =>
                {
                    b.Property<int>("ProcessoFerramentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessoFerramentaId"));

                    b.Property<int>("FerramentaId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessoId")
                        .HasColumnType("int");

                    b.Property<int?>("SubprocessoId")
                        .HasColumnType("int");

                    b.HasKey("ProcessoFerramentaId");

                    b.HasIndex("FerramentaId");

                    b.HasIndex("ProcessoId");

                    b.HasIndex("SubprocessoId");

                    b.ToTable("ProcessoFerramentas");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.ProcessoResponsavel", b =>
                {
                    b.Property<int>("ProcessoResponsavelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessoResponsavelId"));

                    b.Property<int?>("ProcessoId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsavelId")
                        .HasColumnType("int");

                    b.Property<int?>("SubprocessoId")
                        .HasColumnType("int");

                    b.HasKey("ProcessoResponsavelId");

                    b.HasIndex("ProcessoId");

                    b.HasIndex("ResponsavelId");

                    b.HasIndex("SubprocessoId");

                    b.ToTable("ProcessoResponsaveis");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Responsavel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipeId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.ToTable("Responsaveis");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Subprocesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProceId")
                        .HasColumnType("int")
                        .HasColumnName("ProceId");

                    b.Property<int?>("ProcessoId")
                        .HasColumnType("int");

                    b.Property<int?>("SubprocessoPaiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessoId");

                    b.HasIndex("SubprocessoPaiId");

                    b.ToTable("Subprocessos");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Processo", b =>
                {
                    b.HasOne("StageTest.Domain.Entities.Departamento", "Departamento")
                        .WithMany("Processos")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StageTest.Domain.Entities.Equipe", "Responsaveis")
                        .WithMany("Processos")
                        .HasForeignKey("ResponsaveisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Responsaveis");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.ProcessoDocumentacao", b =>
                {
                    b.HasOne("StageTest.Domain.Entities.Documentacao", "Documentacao")
                        .WithMany("Processos")
                        .HasForeignKey("DocumentacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StageTest.Domain.Entities.Processo", "Processo")
                        .WithMany("Documentacoes")
                        .HasForeignKey("ProcessoId");

                    b.HasOne("StageTest.Domain.Entities.Subprocesso", "Subprocesso")
                        .WithMany()
                        .HasForeignKey("SubprocessoId");

                    b.Navigation("Documentacao");

                    b.Navigation("Processo");

                    b.Navigation("Subprocesso");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.ProcessoFerramenta", b =>
                {
                    b.HasOne("StageTest.Domain.Entities.Ferramenta", "Ferramenta")
                        .WithMany("Processos")
                        .HasForeignKey("FerramentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StageTest.Domain.Entities.Processo", "Processo")
                        .WithMany("Ferramentas")
                        .HasForeignKey("ProcessoId");

                    b.HasOne("StageTest.Domain.Entities.Subprocesso", "Subprocesso")
                        .WithMany()
                        .HasForeignKey("SubprocessoId");

                    b.Navigation("Ferramenta");

                    b.Navigation("Processo");

                    b.Navigation("Subprocesso");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.ProcessoResponsavel", b =>
                {
                    b.HasOne("StageTest.Domain.Entities.Processo", "Processo")
                        .WithMany()
                        .HasForeignKey("ProcessoId");

                    b.HasOne("StageTest.Domain.Entities.Responsavel", "Responsavel")
                        .WithMany()
                        .HasForeignKey("ResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StageTest.Domain.Entities.Subprocesso", "Subprocesso")
                        .WithMany()
                        .HasForeignKey("SubprocessoId");

                    b.Navigation("Processo");

                    b.Navigation("Responsavel");

                    b.Navigation("Subprocesso");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Responsavel", b =>
                {
                    b.HasOne("StageTest.Domain.Entities.Equipe", "Equipe")
                        .WithMany("Responsaveis")
                        .HasForeignKey("EquipeId");

                    b.Navigation("Equipe");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Subprocesso", b =>
                {
                    b.HasOne("StageTest.Domain.Entities.Processo", null)
                        .WithMany("Subprocessos")
                        .HasForeignKey("ProcessoId");

                    b.HasOne("StageTest.Domain.Entities.Subprocesso", "SubprocessoPai")
                        .WithMany("SubprocessosFilhos")
                        .HasForeignKey("SubprocessoPaiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SubprocessoPai");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Processos");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Documentacao", b =>
                {
                    b.Navigation("Processos");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Equipe", b =>
                {
                    b.Navigation("Processos");

                    b.Navigation("Responsaveis");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Ferramenta", b =>
                {
                    b.Navigation("Processos");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Processo", b =>
                {
                    b.Navigation("Documentacoes");

                    b.Navigation("Ferramentas");

                    b.Navigation("Subprocessos");
                });

            modelBuilder.Entity("StageTest.Domain.Entities.Subprocesso", b =>
                {
                    b.Navigation("SubprocessosFilhos");
                });
#pragma warning restore 612, 618
        }
    }
}
